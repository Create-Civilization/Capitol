plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

group = mod_group_id
version = mod_version
var replaceProperties = [
        minecraft_version: minecraft_version,
        minecraft_version_range: minecraft_version_range,
        forge_version: forge_version,
        forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id,
        mod_name: mod_name,
        mod_license: mod_license,
        mod_version: mod_version,
        mod_authors: mod_authors,
        mod_description: mod_description,
        yarn_mappings: yarn_mappings,
]

loom {
    forge {
        mixinConfig "${mod_id}.mixins.json"
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    minecraft "net.minecraft:minecraft:$project.minecraft_version"
    mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"
    forge "net.minecraftforge:forge:$project.forge_version"
}

processResources {
    inputs.property 'version', project.version

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [
                project: project
        ]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(
                [
                        "Specification-Title": mod_id,
                        "Specification-Vendor": mod_authors,
                        "Specification-Version": "1", // We are version 1 of ourselves
                        "Implementation-Title": project.name,
                        "Implementation-Version": project.jar.archiveVersion,
                        "Implementation-Vendor": mod_authors,
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                ]
        )
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}